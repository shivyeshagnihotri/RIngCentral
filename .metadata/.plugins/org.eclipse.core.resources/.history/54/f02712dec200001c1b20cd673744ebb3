package group.artifact;

import java.io.FileInputStream;
import java.util.Properties;

import org.json.JSONObject;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import io.restassured.RestAssured;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class ApiTestcases {

	Properties prop;
	SoftAssert asserts;

	@BeforeTest
	public void config() throws Exception{
		prop = new Properties();
		FileInputStream fis = new FileInputStream("config.properties");
		prop.load(fis); 

	}

	//GET request with invalid id
	@Test(priority=1)
	public void getInvalidId() throws Exception
	{
		asserts = new SoftAssert();
		RestAssured.baseURI = "http://localhost:8080";
		RequestSpecification getIdRequest = RestAssured.given();
		Response getById = getIdRequest.request(Method.GET,"/api/users/"+prop.getProperty("invalidId"));
		//System.out.println(getById.asString());
		//System.out.println(getById.statusCode());
		asserts.assertEquals(getById.statusCode(),404);
		asserts.assertAll();
	}

	//GET request where id is not of type int
	@Test(priority=2)
	public void getStringid() throws Exception
	{
		asserts = new SoftAssert();
		RestAssured.baseURI = "http://localhost:8080";
		RequestSpecification getIdRequest = RestAssured.given();
		Response getById = getIdRequest.request(Method.GET,"/api/users/hello");
		//System.out.println(getById.asString());
		//System.out.println(getById.statusCode());
		asserts.assertEquals(getById.statusCode(),400);
		asserts.assertAll();
	}

	//Get request without any param should work as getting all users
	@Test(priority=3)
	public void getWithoutid() throws Exception
	{
		asserts = new SoftAssert();
		RestAssured.baseURI = "http://localhost:8080";
		RequestSpecification getIdRequest = RestAssured.given();
		Response getById = getIdRequest.request(Method.GET,"/api/users/");
		//System.out.println(getById.asString());
		JSONObject byIdPath = new JSONObject(getById.asString());
		asserts.assertFalse(byIdPath.isEmpty());
		asserts.assertEquals(getById.statusCode(),200);
		asserts.assertAll();
	}

	//PUT request for valid id
	@Test(priority=4)
	public void invalidPutById() throws Exception
	{
		RestAssured.baseURI = "http://localhost:8080";
		RequestSpecification putIdRequest = RestAssured.given().header("Content-Type", "application/json");
		String payload = "{\"dayOfBirth\":\""+prop.getProperty("dayOfBirth")+"\",\"email\":\""+prop.getProperty("email")+"\",\"firstName\":\""+prop.getProperty("firstName")+"\",\"lastName\":\""+prop.getProperty("lastName")+"\"}";
		putIdRequest.body(payload);
		Response putById = putIdRequest.request(Method.PUT,"/api/users/"+prop.getProperty("validId"));
		//System.out.println(putById.asString());
		JSONObject putIdPath = new JSONObject(putById.asString());
		asserts.assertEquals(putById.statusCode(),200);
		asserts.assertEquals(putIdPath.get("dayOfBirth"),prop.getProperty("dayOfBirth"));
		asserts.assertEquals(putIdPath.get("email"),prop.getProperty("email"));
		asserts.assertEquals(putIdPath.get("firstName"),prop.getProperty("firstName"));
		asserts.assertEquals(putIdPath.get("lastName"),prop.getProperty("lastName"));
		asserts.assertAll();

	}

	@Test(priority=5)
	public void validGetById() throws Exception
	{
		RestAssured.baseURI = "http://localhost:8080";
		RequestSpecification getIdRequest = RestAssured.given();
		Response getById = getIdRequest.request(Method.GET,"/api/users/"+prop.getProperty("validId"));
		//System.out.println(getById.asString());
		//JSONObject byIdPath = new JSONObject(getById.asString());
		//System.out.println(getById.getHeaders());
		//System.out.println(byIdPath.get("firstName"));

	}


}
